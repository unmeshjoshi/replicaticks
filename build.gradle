plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
}

group = 'io.github.unmeshjoshi'
version = '0.1.0-alpha.1'

repositories {
    jcenter()
}

dependencies {
    // Add your dependencies here
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    
    // Production-ready storage
    implementation 'org.rocksdb:rocksdbjni:9.7.3'
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

// Configure the shadow plugin to create a fat JAR
shadowJar {
    archiveBaseName.set('replicated-server')
    archiveClassifier.set('all')
    archiveVersion.set('')
    
    // Merge service files (important for RocksDB)
    mergeServiceFiles()
    
    // Exclude development dependencies
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    
    // Set the main class for the JAR
    manifest {
        attributes 'Main-Class': 'replicated.cmd.ServerApplication'
    }
}

// Create a separate client JAR
task shadowClientJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    group = 'build'
    description = 'Creates a fat JAR for the client application'
    
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
    
    archiveBaseName.set('replicated-client')
    archiveClassifier.set('all')
    archiveVersion.set('')
    
    // Merge service files
    mergeServiceFiles()
    
    // Exclude development dependencies
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    
    // Set the main class for the client JAR
    manifest {
        attributes 'Main-Class': 'replicated.cmd.ClientApplication'
    }
}

// Make the shadowJar task depend on the jar task
jar.dependsOn shadowJar

test {
    useJUnitPlatform()
    
    // Show test output including System.out.println
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

// Task to run the distributed cluster test
task runCluster(type: Exec) {
    group = 'application'
    description = 'Runs a 3-node distributed cluster test with client operations'
    
    // Ensure JARs are built first
    dependsOn shadowJar, shadowClientJar
    
    // Make executable
    doFirst {
        exec {
            commandLine 'chmod', '+x', 'scripts/run-cluster.sh'
        }
    }
    
    commandLine './scripts/run-cluster.sh'
    
    // Handle cleanup on failure
    doLast {
        if (executionResult.get().exitValue != 0) {
            println "Cluster test failed, ensuring cleanup..."
            try {
                exec {
                    commandLine './scripts/kill-servers.sh'
                    ignoreExitValue = true
                }
            } catch (Exception e) {
                println "Cleanup script failed: ${e.message}"
            }
        }
    }
}

// --- Publishing -------------------------------------------------------------
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = 'replicaticks'
            version = project.version
        }
    }
    repositories {
        mavenLocal()
    }
}
